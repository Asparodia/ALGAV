import matplotlib.pyplot as plt


plt.plot([100, 200, 500, 1000,5000,10000,20000,50000], [0.0, 0.0, 0.0,6.25 ,41.43,78.14 ,159.37,397.16],label="File Binomiale",color="blue")
plt.plot([100, 200, 500, 1000,5000,10000,20000,50000], [0.0, 0.0, 0.0,6.25 ,41.43,78.14 ,159.37,397.16],'x',color="blue")

plt.plot([100, 200, 500, 1000,5000,10000,20000,50000], [0.0, 6.25, 3.12,6.24 ,40.62 ,87.50,184.39,556.77],label="Tas Min Arbre",color="red")
plt.plot([100, 200, 500, 1000,5000,10000,20000,50000], [0.0, 6.25, 3.12,6.24 ,40.62 ,87.50,184.39,556.77],'x',color="red")

plt.plot([100, 200, 500, 1000,5000,10000,20000,50000], [0.0,0.0, 0.0, 0.0, 12.50,12.50,28.12,59.37],label="Tas Min Tableau",color="pink")
plt.plot([100, 200, 500, 1000,5000,10000,20000,50000], [0.0,0.0, 0.0, 0.0, 12.50,12.50,28.12,59.37],'x',color="pink")

plt.ylabel('temps en miliseconde')
plt.xlabel('taille des listes')
plt.title("Mesures pour ConsIter sur les differentes structures ")
plt.legend()
plt.savefig('timeConsIter.png')
plt.show()


plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 15.621, 15.60,0.0 ,0.0 ,0.0,0.0,15.628],label= "File Binomiale",color="blue")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 15.621, 15.60,0.0 ,0.0 ,0.0,0.0,15.628],'x',color="b")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [15.62, 31.25, 94.33, 93.76 ,671.94 ,1906.45 ,4187.94 ,14564.06],label = "Tas Min Arbre",color="red")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [15.62, 31.25, 94.33, 93.76 ,671.94 ,1906.45 ,4187.94 ,14564.06],'x',color="red")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 0.0, 15.62, 15.62,62.50,171.89,390.66,1015.73],label="Tas Min Tableau",color="pink")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 0.0, 15.62, 15.62,62.50,171.89,390.66,1015.73],'x',color="pink")


plt.ylabel('temps en miliseconde')
plt.xlabel('taille du tas obtenu grace a l\'union')
plt.title("Mesures pour Union sur les differentes structures ")
plt.legend()
plt.savefig('timeUnion.png')
plt.show()

plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [15.62, 31.25, 94.33, 93.76 ,671.94 ,1906.45 ,4187.94 ,14564.06],label = "Tas Min Arbre union",color="red")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [15.62, 31.25, 94.33, 93.76 ,671.94 ,1906.45 ,4187.94 ,14564.06],'x',color="red")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 0.0, 31.25,296.90,203.14,578.18 ,2114.22,5422.45],label = "Tas Min Arbre union 2",color="green")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000],  [0.0, 0.0, 31.25,296.90,203.14,578.18 ,2114.22,5422.45],'x',color="green")
0.0
296.9095706939697
578.1824588775635
0.0
2114.2215728759766
31.25309944152832
203.14931869506836
5422.457218170166

plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 0.0, 15.62, 15.62,62.50,171.89,390.66,1015.73],label="Tas Min Tab union",color="pink")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 0.0, 15.62, 15.62,62.50,171.89,390.66,1015.73],'x',color="pink")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 0.0, 15.62, 0.0,15.62,78.13,203.17,535.29],label="Tas Min Tab union 2",color="blue")
plt.plot([500, 1000, 2500, 5000,25000,50000,100000,250000], [0.0, 0.0, 15.62, 0.0,15.62,78.13,203.17,535.29],'x',color="b")
0.0
0.0
78.13405990600586
0.0
203.17578315734863
15.623092651367188
15.628576278686523
535.2997779846191

plt.ylabel('temps en miliseconde')
plt.xlabel('taille du tas obtenu grace a l\'union')
plt.title("Comparaison des mesures obtenue avec union et union2 ")
plt.legend()
plt.savefig('timeUnion2')